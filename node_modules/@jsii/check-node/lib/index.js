"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.checkNode = void 0;
const chalk_1 = require("chalk");
const console_1 = require("console");
const process_1 = require("process");
const constants_1 = require("./constants");
/**
 * Checks the current process' node runtime version against the release support
 * matrix, and issues a warning to STDERR if the current version is not fully
 * supported (i.e: it is deprecated, end-of-life, or untested).
 */
function checkNode() {
    const { nodeRelease, knownBroken } = constants_1.NodeRelease.forThisRuntime();
    if (nodeRelease === null || nodeRelease === void 0 ? void 0 : nodeRelease.endOfLife) {
        const qualifier = nodeRelease.endOfLifeDate
            ? ` on ${nodeRelease.endOfLifeDate.toISOString().slice(0, 10)}`
            : '';
        veryVisibleMessage(chalk_1.bgRed.white.bold, `Node ${nodeRelease.majorVersion} has reached end-of-life${qualifier} and is not supported.`, `Please upgrade to a supported node version as soon as possible.`);
    }
    else if (knownBroken) {
        veryVisibleMessage(chalk_1.bgRed.white.bold, `Node ${process_1.version} is unsupported and has known compatibility issues with this software.`);
    }
    else if (!nodeRelease || nodeRelease.untested) {
        veryVisibleMessage(chalk_1.bgYellow.black, `This software has not been tested with node ${process_1.version}.`);
    }
    else if (nodeRelease === null || nodeRelease === void 0 ? void 0 : nodeRelease.deprecated) {
        const deadline = nodeRelease.endOfLifeDate.toISOString().slice(0, 10);
        veryVisibleMessage(chalk_1.bgYellowBright.black, `Node ${nodeRelease.majorVersion} is approaching end-of-life and will no longer be supported in new releases after ${deadline}.`, `Please upgrade to a supported node version as soon as possible.`);
    }
    function veryVisibleMessage(chalk, message, callToAction = 'You may to encounter runtime issues, and should switch to a supported release.') {
        const lines = [
            message,
            callToAction,
            '',
            `This software is currently running on node ${process_1.version}.`,
            'As of the current release of this software, supported node releases are:',
            ...constants_1.NodeRelease.ALL_RELEASES.filter((release) => release.supported)
                // We display those from longest remaining support to shortest (to incitate people to be ahead of future derepcations).
                .sort((l, r) => {
                var _a, _b, _c, _d;
                return ((_b = (_a = r.endOfLifeDate) === null || _a === void 0 ? void 0 : _a.getTime()) !== null && _b !== void 0 ? _b : 0) -
                    ((_d = (_c = l.endOfLifeDate) === null || _c === void 0 ? void 0 : _c.getTime()) !== null && _d !== void 0 ? _d : 0);
            })
                .map((release) => `- ${release.toString()}${release.deprecated ? ' [DEPRECATED]' : ''}`),
        ];
        const len = Math.max(...lines.map((l) => l.length));
        const border = chalk('!'.repeat(len + 8));
        const spacer = chalk(`!!  ${' '.repeat(len)}  !!`);
        (0, console_1.error)(border);
        (0, console_1.error)(spacer);
        for (const line of lines) {
            (0, console_1.error)(chalk(`!!  ${line.padEnd(len, ' ')}  !!`));
        }
        (0, console_1.error)(spacer);
        (0, console_1.error)(border);
    }
}
exports.checkNode = checkNode;
//# sourceMappingURL=index.js.map