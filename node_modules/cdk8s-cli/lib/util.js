"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getFiles = exports.download = exports.safeParseYaml = exports.safeParseJson = exports.synthApp = exports.mkdtemp = exports.shell = void 0;
const child_process_1 = require("child_process");
const fs_1 = require("fs");
const http = __importStar(require("http"));
const https = __importStar(require("https"));
const os = __importStar(require("os"));
const path = __importStar(require("path"));
const url_1 = require("url");
const fs = __importStar(require("fs-extra"));
const yaml = __importStar(require("yaml"));
async function shell(program, args = [], options = {}) {
    var _a;
    const command = `"${program} ${args.join(' ')}" at ${path.resolve((_a = options.cwd) !== null && _a !== void 0 ? _a : '.')}`;
    return new Promise((ok, ko) => {
        var _a;
        const child = (0, child_process_1.spawn)(program, args, { stdio: ['inherit', 'pipe', 'inherit'], ...options });
        const data = new Array();
        (_a = child.stdout) === null || _a === void 0 ? void 0 : _a.on('data', chunk => data.push(chunk));
        child.once('error', err => ko(new Error(`command ${command} failed: ${err}`)));
        child.once('exit', code => {
            if (code === 0) {
                return ok(Buffer.concat(data).toString('utf-8'));
            }
            else {
                return ko(new Error(`command ${command} returned a non-zero exit code ${code}`));
            }
        });
    });
}
exports.shell = shell;
async function mkdtemp(closure) {
    const workdir = await fs.mkdtemp(path.join(os.tmpdir(), 'cdk8s-'));
    try {
        await closure(workdir);
    }
    finally {
        await fs.remove(workdir);
    }
}
exports.mkdtemp = mkdtemp;
async function synthApp(command, outdir) {
    await shell(command, [], {
        shell: true,
        env: {
            ...process.env,
            CDK8S_OUTDIR: outdir,
        },
    });
    if (!await fs.pathExists(outdir)) {
        console.error(`ERROR: synthesis failed, app expected to create "${outdir}"`);
        process.exit(1);
    }
    let found = false;
    const yamlFiles = await getFiles(outdir);
    if (yamlFiles === null || yamlFiles === void 0 ? void 0 : yamlFiles.length) {
        for (const yamlFile of yamlFiles) {
            console.log(yamlFile);
        }
        found = true;
    }
    if (!found) {
        console.error('No manifests synthesized');
    }
}
exports.synthApp = synthApp;
function safeParseJson(text, reviver) {
    const json = JSON.parse(text);
    reviver.sanitize(json);
    return json;
}
exports.safeParseJson = safeParseJson;
function safeParseYaml(text, reviver) {
    // parseAllDocuments doesnt accept a reviver
    // so we first parse normally and than transform
    // to JS using the reviver.
    const parsed = yaml.parseAllDocuments(text);
    const docs = [];
    for (const doc of parsed) {
        const json = doc.toJS();
        reviver.sanitize(json);
        docs.push(json);
    }
    return docs;
}
exports.safeParseYaml = safeParseYaml;
async function download(url) {
    let client;
    const proto = (0, url_1.parse)(url).protocol;
    if (!proto || proto === 'file:') {
        return fs.readFile(url, 'utf-8');
    }
    switch (proto) {
        case 'https:':
            client = https;
            break;
        case 'http:':
            client = http;
            break;
        default:
            throw new Error(`unsupported protocol ${proto}`);
    }
    return new Promise((ok, ko) => {
        const req = client.get(url, res => {
            switch (res.statusCode) {
                case 200: {
                    const data = new Array();
                    res.on('data', chunk => data.push(chunk));
                    res.once('end', () => ok(Buffer.concat(data).toString('utf-8')));
                    res.once('error', ko);
                    break;
                }
                case 301:
                case 302: {
                    if (res.headers.location) {
                        ok(download(res.headers.location));
                    }
                    break;
                }
                default: {
                    ko(new Error(`${res.statusMessage}: ${url}`));
                }
            }
        });
        req.once('error', ko);
        req.end();
    });
}
exports.download = download;
async function getFiles(filePath) {
    // Ensure path is valid
    try {
        await fs_1.promises.access(filePath);
    }
    catch {
        return [];
    }
    // Read Path contents
    const entries = await fs_1.promises.readdir(filePath, { withFileTypes: true });
    // Get files within the current directory
    const files = entries
        .filter(file => (!file.isDirectory() && file.name.endsWith('.k8s.yaml')))
        .map(file => (filePath + '/' + file.name));
    // Get sub-folders within the current folder
    const folders = entries.filter(folder => folder.isDirectory());
    for (const folder of folders) {
        files.push(...await getFiles(`${filePath}/${folder.name}`));
    }
    return files;
}
exports.getFiles = getFiles;
//# sourceMappingURL=data:application/json;base64,