"use strict";
var _a, _b;
Object.defineProperty(exports, "__esModule", { value: true });
exports.NonApiResource = exports.ApiResource = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
/**
 * Represents information about an API resource type.
 */
class ApiResource {
    constructor(options) {
        this.apiGroup = options.apiGroup;
        this.resourceType = options.resourceType;
    }
    /**
     * API resource information for a custom resource type.
     */
    static custom(options) {
        return new ApiResource(options);
    }
    ;
    asApiResource() {
        return this;
    }
    asNonApiResource() {
        return undefined;
    }
}
exports.ApiResource = ApiResource;
_a = JSII_RTTI_SYMBOL_1;
ApiResource[_a] = { fqn: "cdk8s-plus-22.ApiResource", version: "2.0.0-rc.134" };
/**
 * API resource information for Binding.
 */
ApiResource.BINDINGS = new ApiResource({
    apiGroup: '',
    resourceType: 'bindings',
});
/**
 * API resource information for ComponentStatus.
 */
ApiResource.COMPONENT_STATUSES = new ApiResource({
    apiGroup: '',
    resourceType: 'componentstatuses',
});
/**
 * API resource information for ConfigMap.
 */
ApiResource.CONFIG_MAPS = new ApiResource({
    apiGroup: '',
    resourceType: 'configmaps',
});
/**
 * API resource information for Endpoints.
 */
ApiResource.ENDPOINTS = new ApiResource({
    apiGroup: '',
    resourceType: 'endpoints',
});
/**
 * API resource information for Event.
 */
ApiResource.EVENTS = new ApiResource({
    apiGroup: '',
    resourceType: 'events',
});
/**
 * API resource information for LimitRange.
 */
ApiResource.LIMIT_RANGES = new ApiResource({
    apiGroup: '',
    resourceType: 'limitranges',
});
/**
 * API resource information for Namespace.
 */
ApiResource.NAMESPACES = new ApiResource({
    apiGroup: '',
    resourceType: 'namespaces',
});
/**
 * API resource information for Node.
 */
ApiResource.NODES = new ApiResource({
    apiGroup: '',
    resourceType: 'nodes',
});
/**
 * API resource information for PersistentVolumeClaim.
 */
ApiResource.PERSISTENT_VOLUME_CLAIMS = new ApiResource({
    apiGroup: '',
    resourceType: 'persistentvolumeclaims',
});
/**
 * API resource information for PersistentVolume.
 */
ApiResource.PERSISTENT_VOLUMES = new ApiResource({
    apiGroup: '',
    resourceType: 'persistentvolumes',
});
/**
 * API resource information for Pod.
 */
ApiResource.PODS = new ApiResource({
    apiGroup: '',
    resourceType: 'pods',
});
/**
 * API resource information for PodTemplate.
 */
ApiResource.POD_TEMPLATES = new ApiResource({
    apiGroup: '',
    resourceType: 'podtemplates',
});
/**
 * API resource information for ReplicationController.
 */
ApiResource.REPLICATION_CONTROLLERS = new ApiResource({
    apiGroup: '',
    resourceType: 'replicationcontrollers',
});
/**
 * API resource information for ResourceQuota.
 */
ApiResource.RESOURCE_QUOTAS = new ApiResource({
    apiGroup: '',
    resourceType: 'resourcequotas',
});
/**
 * API resource information for Secret.
 */
ApiResource.SECRETS = new ApiResource({
    apiGroup: '',
    resourceType: 'secrets',
});
/**
 * API resource information for ServiceAccount.
 */
ApiResource.SERVICE_ACCOUNTS = new ApiResource({
    apiGroup: '',
    resourceType: 'serviceaccounts',
});
/**
 * API resource information for Service.
 */
ApiResource.SERVICES = new ApiResource({
    apiGroup: '',
    resourceType: 'services',
});
/**
 * API resource information for MutatingWebhookConfiguration.
 */
ApiResource.MUTATING_WEBHOOK_CONFIGURATIONS = new ApiResource({
    apiGroup: 'admissionregistration.k8s.io',
    resourceType: 'mutatingwebhookconfigurations',
});
/**
 * API resource information for ValidatingWebhookConfiguration.
 */
ApiResource.VALIDATING_WEBHOOK_CONFIGURATIONS = new ApiResource({
    apiGroup: 'admissionregistration.k8s.io',
    resourceType: 'validatingwebhookconfigurations',
});
/**
 * API resource information for CustomResourceDefinition.
 */
ApiResource.CUSTOM_RESOURCE_DEFINITIONS = new ApiResource({
    apiGroup: 'apiextensions.k8s.io',
    resourceType: 'customresourcedefinitions',
});
/**
 * API resource information for APIService.
 */
ApiResource.API_SERVICES = new ApiResource({
    apiGroup: 'apiregistration.k8s.io',
    resourceType: 'apiservices',
});
/**
 * API resource information for ControllerRevision.
 */
ApiResource.CONTROLLER_REVISIONS = new ApiResource({
    apiGroup: 'apps',
    resourceType: 'controllerrevisions',
});
/**
 * API resource information for DaemonSet.
 */
ApiResource.DAEMON_SETS = new ApiResource({
    apiGroup: 'apps',
    resourceType: 'daemonsets',
});
/**
 * API resource information for Deployment.
 */
ApiResource.DEPLOYMENTS = new ApiResource({
    apiGroup: 'apps',
    resourceType: 'deployments',
});
/**
 * API resource information for ReplicaSet.
 */
ApiResource.REPLICA_SETS = new ApiResource({
    apiGroup: 'apps',
    resourceType: 'replicasets',
});
/**
 * API resource information for StatefulSet.
 */
ApiResource.STATEFUL_SETS = new ApiResource({
    apiGroup: 'apps',
    resourceType: 'statefulsets',
});
/**
 * API resource information for TokenReview.
 */
ApiResource.TOKEN_REVIEWS = new ApiResource({
    apiGroup: 'authentication.k8s.io',
    resourceType: 'tokenreviews',
});
/**
 * API resource information for LocalSubjectAccessReview.
 */
ApiResource.LOCAL_SUBJECT_ACCESS_REVIEWS = new ApiResource({
    apiGroup: 'authorization.k8s.io',
    resourceType: 'localsubjectaccessreviews',
});
/**
 * API resource information for SelfSubjectAccessReview.
 */
ApiResource.SELF_SUBJECT_ACCESS_REVIEWS = new ApiResource({
    apiGroup: 'authorization.k8s.io',
    resourceType: 'selfsubjectaccessreviews',
});
/**
 * API resource information for SelfSubjectRulesReview.
 */
ApiResource.SELF_SUBJECT_RULES_REVIEWS = new ApiResource({
    apiGroup: 'authorization.k8s.io',
    resourceType: 'selfsubjectrulesreviews',
});
/**
 * API resource information for SubjectAccessReview.
 */
ApiResource.SUBJECT_ACCESS_REVIEWS = new ApiResource({
    apiGroup: 'authorization.k8s.io',
    resourceType: 'subjectaccessreviews',
});
/**
 * API resource information for HorizontalPodAutoscaler.
 */
ApiResource.HORIZONTAL_POD_AUTOSCALERS = new ApiResource({
    apiGroup: 'autoscaling',
    resourceType: 'horizontalpodautoscalers',
});
/**
 * API resource information for CronJob.
 */
ApiResource.CRON_JOBS = new ApiResource({
    apiGroup: 'batch',
    resourceType: 'cronjobs',
});
/**
 * API resource information for Job.
 */
ApiResource.JOBS = new ApiResource({
    apiGroup: 'batch',
    resourceType: 'jobs',
});
/**
 * API resource information for CertificateSigningRequest.
 */
ApiResource.CERTIFICATE_SIGNING_REQUESTS = new ApiResource({
    apiGroup: 'certificates.k8s.io',
    resourceType: 'certificatesigningrequests',
});
/**
 * API resource information for Lease.
 */
ApiResource.LEASES = new ApiResource({
    apiGroup: 'coordination.k8s.io',
    resourceType: 'leases',
});
/**
 * API resource information for EndpointSlice.
 */
ApiResource.ENDPOINT_SLICES = new ApiResource({
    apiGroup: 'discovery.k8s.io',
    resourceType: 'endpointslices',
});
/**
 * API resource information for FlowSchema.
 */
ApiResource.FLOW_SCHEMAS = new ApiResource({
    apiGroup: 'flowcontrol.apiserver.k8s.io',
    resourceType: 'flowschemas',
});
/**
 * API resource information for PriorityLevelConfiguration.
 */
ApiResource.PRIORITY_LEVEL_CONFIGURATIONS = new ApiResource({
    apiGroup: 'flowcontrol.apiserver.k8s.io',
    resourceType: 'prioritylevelconfigurations',
});
/**
 * API resource information for IngressClass.
 */
ApiResource.INGRESS_CLASSES = new ApiResource({
    apiGroup: 'networking.k8s.io',
    resourceType: 'ingressclasses',
});
/**
 * API resource information for Ingress.
 */
ApiResource.INGRESSES = new ApiResource({
    apiGroup: 'networking.k8s.io',
    resourceType: 'ingresses',
});
/**
 * API resource information for NetworkPolicy.
 */
ApiResource.NETWORK_POLICIES = new ApiResource({
    apiGroup: 'networking.k8s.io',
    resourceType: 'networkpolicies',
});
/**
 * API resource information for RuntimeClass.
 */
ApiResource.RUNTIME_CLASSES = new ApiResource({
    apiGroup: 'node.k8s.io',
    resourceType: 'runtimeclasses',
});
/**
 * API resource information for PodDisruptionBudget.
 */
ApiResource.POD_DISRUPTION_BUDGETS = new ApiResource({
    apiGroup: 'policy',
    resourceType: 'poddisruptionbudgets',
});
/**
 * API resource information for PodSecurityPolicy.
 */
ApiResource.POD_SECURITY_POLICIES = new ApiResource({
    apiGroup: 'policy',
    resourceType: 'podsecuritypolicies',
});
/**
 * API resource information for ClusterRoleBinding.
 */
ApiResource.CLUSTER_ROLE_BINDINGS = new ApiResource({
    apiGroup: 'rbac.authorization.k8s.io',
    resourceType: 'clusterrolebindings',
});
/**
 * API resource information for ClusterRole.
 */
ApiResource.CLUSTER_ROLES = new ApiResource({
    apiGroup: 'rbac.authorization.k8s.io',
    resourceType: 'clusterroles',
});
/**
 * API resource information for RoleBinding.
 */
ApiResource.ROLE_BINDINGS = new ApiResource({
    apiGroup: 'rbac.authorization.k8s.io',
    resourceType: 'rolebindings',
});
/**
 * API resource information for Role.
 */
ApiResource.ROLES = new ApiResource({
    apiGroup: 'rbac.authorization.k8s.io',
    resourceType: 'roles',
});
/**
 * API resource information for PriorityClass.
 */
ApiResource.PRIORITY_CLASSES = new ApiResource({
    apiGroup: 'scheduling.k8s.io',
    resourceType: 'priorityclasses',
});
/**
 * API resource information for CSIDriver.
 */
ApiResource.CSI_DRIVERS = new ApiResource({
    apiGroup: 'storage.k8s.io',
    resourceType: 'csidrivers',
});
/**
 * API resource information for CSINode.
 */
ApiResource.CSI_NODES = new ApiResource({
    apiGroup: 'storage.k8s.io',
    resourceType: 'csinodes',
});
/**
 * API resource information for CSIStorageCapacity.
 */
ApiResource.CSI_STORAGE_CAPACITIES = new ApiResource({
    apiGroup: 'storage.k8s.io',
    resourceType: 'csistoragecapacities',
});
/**
 * API resource information for StorageClass.
 */
ApiResource.STORAGE_CLASSES = new ApiResource({
    apiGroup: 'storage.k8s.io',
    resourceType: 'storageclasses',
});
/**
 * API resource information for VolumeAttachment.
 */
ApiResource.VOLUME_ATTACHMENTS = new ApiResource({
    apiGroup: 'storage.k8s.io',
    resourceType: 'volumeattachments',
});
/**
 * Factory for creating non api resources.
 */
class NonApiResource {
    constructor(nonResourceUrl) {
        this.nonResourceUrl = nonResourceUrl;
    }
    static of(url) {
        return new NonApiResource(url);
    }
    ;
    asApiResource() {
        return undefined;
    }
    asNonApiResource() {
        return this.nonResourceUrl;
    }
}
exports.NonApiResource = NonApiResource;
_b = JSII_RTTI_SYMBOL_1;
NonApiResource[_b] = { fqn: "cdk8s-plus-22.NonApiResource", version: "2.0.0-rc.134" };
//# sourceMappingURL=data:application/json;base64,