"use strict";
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.CronJob = exports.ConcurrencyPolicy = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const cdk8s_1 = require("cdk8s");
const k8s = require("./imports/k8s");
const pod_1 = require("./pod");
const workload = require("./workload");
/**
 * Concurrency policy for CronJobs.
 */
var ConcurrencyPolicy;
(function (ConcurrencyPolicy) {
    /**
     * This policy allows to run job concurrently.
     */
    ConcurrencyPolicy["ALLOW"] = "Allow";
    /**
     * This policy does not allow to run job concurrently. It does not let a new job to be scheduled if the previous one is not finished yet.
     */
    ConcurrencyPolicy["FORBID"] = "Forbid";
    /**
     * This policy replaces the currently running job if a new job is being scheduled.
     */
    ConcurrencyPolicy["REPLACE"] = "Replace";
})(ConcurrencyPolicy = exports.ConcurrencyPolicy || (exports.ConcurrencyPolicy = {}));
/**
 * A CronJob is responsible for creating a Job and scheduling it based on provided cron schedule. This helps running Jobs in a recurring manner.
 */
class CronJob extends workload.Workload {
    constructor(scope, id, props) {
        super(scope, id, {
            restartPolicy: pod_1.RestartPolicy.NEVER,
            select: false,
            ...props,
        });
        /**
         * Represents the resource type.
         */
        this.resourceType = 'cronjob';
        this.apiObject = new k8s.KubeCronJob(this, 'Resource', {
            metadata: props.metadata,
            spec: cdk8s_1.Lazy.any({ produce: () => this._toKube() }),
        });
        if (props.startingDeadline != undefined && props.startingDeadline.toSeconds() < 10) {
            throw new Error(`The 'startingDeadline' property cannot be less than 10 seconds since the Kubernetes CronJobController checks things every 10 seconds and hence the CronJob may not be scheduled. The value passed is: ${props.startingDeadline}`);
        }
        if (props.ttlAfterFinished != undefined && (props.successfulJobsRetained != undefined || props.failedJobsRetained != undefined)) {
            throw new Error('The \'ttlAfterFinished\' property cannot be set if \'successfulJobsRetained\' property or \'failedJobsRetained\' property is set. This would cause the retention of jobs to not work properly since it would delete the job based on its value.');
        }
        this.schedule = props.schedule;
        this.concurrencyPolicy = props.concurrencyPolicy ?? ConcurrencyPolicy.FORBID;
        this.startingDeadline = props.startingDeadline ?? cdk8s_1.Duration.seconds(10);
        this.suspend = props.suspend ?? false;
        this.successfulJobsRetained = props.successfulJobsRetained ?? 3;
        this.failedJobsRetained = props.failedJobsRetained ?? 1;
        this.jobProperties = {
            activeDeadline: props.activeDeadline,
            backoffLimit: props.backoffLimit,
            ttlAfterFinished: props.ttlAfterFinished,
        };
    }
    /**
     * @internal
     */
    _toKube() {
        return {
            concurrencyPolicy: this.concurrencyPolicy,
            failedJobsHistoryLimit: this.failedJobsRetained,
            jobTemplate: {
                spec: this._toJobSpec(),
            },
            schedule: this.schedule.expressionString,
            startingDeadlineSeconds: this.startingDeadline.toSeconds(),
            successfulJobsHistoryLimit: this.successfulJobsRetained,
            suspend: this.suspend,
        };
    }
    /**
     * Returns the job spec.
     */
    _toJobSpec() {
        return {
            template: {
                metadata: this.podMetadata.toJson(),
                spec: this._toPodSpec(),
            },
            activeDeadlineSeconds: this.jobProperties.activeDeadline?.toSeconds(),
            backoffLimit: this.jobProperties.backoffLimit,
            ttlSecondsAfterFinished: this.jobProperties.ttlAfterFinished?.toSeconds(),
        };
    }
}
exports.CronJob = CronJob;
_a = JSII_RTTI_SYMBOL_1;
CronJob[_a] = { fqn: "cdk8s-plus-22.CronJob", version: "2.0.0-rc.134" };
//# sourceMappingURL=data:application/json;base64,