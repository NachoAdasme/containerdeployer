"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.targetName = exports.TargetLanguage = void 0;
const assert = require("assert");
var TargetLanguage;
(function (TargetLanguage) {
    TargetLanguage["PYTHON"] = "python";
    TargetLanguage["CSHARP"] = "csharp";
    TargetLanguage["JAVA"] = "java";
    TargetLanguage["GO"] = "go";
})(TargetLanguage = exports.TargetLanguage || (exports.TargetLanguage = {}));
const VALID_TARGET_LANGUAGES = new Set(Object.values(TargetLanguage));
/**
 * @param language a possible value for `TargetLanguage`.
 *
 * @returns the name of the target configuration block for the given language.
 */
function targetName(language) {
    // The TypeScript compiler should guarantee the below `switch` statement covers all possible
    // values of the TargetLanguage enum, but we add an assert here for clarity of intent.
    assert(VALID_TARGET_LANGUAGES.has(language), `Invalid/unexpected target language identifier: ${language}`);
    switch (language) {
        case TargetLanguage.PYTHON:
            return 'python';
        case TargetLanguage.CSHARP:
            return 'dotnet';
        case TargetLanguage.JAVA:
            return 'java';
        case TargetLanguage.GO:
            return 'go';
    }
}
exports.targetName = targetName;
//# sourceMappingURL=target-language.js.map