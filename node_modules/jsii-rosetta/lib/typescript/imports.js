"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.analyzeImportDeclaration = exports.analyzeImportEquals = void 0;
const ts = require("typescript");
const jsii_utils_1 = require("../jsii/jsii-utils");
const util_1 = require("../util");
const ast_utils_1 = require("./ast-utils");
function analyzeImportEquals(node, context) {
    let moduleName = '???';
    (0, ast_utils_1.matchAst)(node.moduleReference, (0, ast_utils_1.nodeOfType)('ref', ts.SyntaxKind.ExternalModuleReference), (bindings) => {
        moduleName = (0, ast_utils_1.stringFromLiteral)(bindings.ref.expression);
    });
    return {
        node,
        packageName: moduleName,
        moduleSymbol: (0, jsii_utils_1.lookupJsiiSymbolFromNode)(context.typeChecker, node.name),
        imports: { import: 'full', alias: context.textOf(node.name) },
    };
}
exports.analyzeImportEquals = analyzeImportEquals;
function analyzeImportDeclaration(node, context) {
    const packageName = (0, ast_utils_1.stringFromLiteral)(node.moduleSpecifier);
    const starBindings = (0, ast_utils_1.matchAst)(node, (0, ast_utils_1.nodeOfType)(ts.SyntaxKind.ImportDeclaration, (0, ast_utils_1.nodeOfType)(ts.SyntaxKind.ImportClause, (0, ast_utils_1.nodeOfType)('namespace', ts.SyntaxKind.NamespaceImport))));
    if (starBindings) {
        return {
            node,
            packageName,
            moduleSymbol: (0, jsii_utils_1.lookupJsiiSymbolFromNode)(context.typeChecker, starBindings.namespace.name),
            imports: {
                import: 'full',
                alias: context.textOf(starBindings.namespace.name),
            },
        };
    }
    const namedBindings = (0, ast_utils_1.matchAst)(node, (0, ast_utils_1.nodeOfType)(ts.SyntaxKind.ImportDeclaration, (0, ast_utils_1.nodeOfType)(ts.SyntaxKind.ImportClause, (0, ast_utils_1.nodeOfType)(ts.SyntaxKind.NamedImports, (0, ast_utils_1.allOfType)(ts.SyntaxKind.ImportSpecifier, 'specifiers')))));
    const elements = [];
    if (namedBindings) {
        elements.push(...namedBindings.specifiers.map((spec) => {
            // regular import { name }, renamed import { propertyName, name }
            if (spec.propertyName) {
                // Renamed import
                return {
                    sourceName: context.textOf(spec.propertyName),
                    alias: context.textOf(spec.name),
                    importedSymbol: (0, jsii_utils_1.lookupJsiiSymbolFromNode)(context.typeChecker, spec.propertyName),
                };
            }
            return {
                sourceName: context.textOf(spec.name),
                importedSymbol: (0, jsii_utils_1.lookupJsiiSymbolFromNode)(context.typeChecker, spec.name),
            };
        }));
    }
    return {
        node,
        packageName,
        imports: { import: 'selective', elements },
        moduleSymbol: (0, util_1.fmap)(elements?.[0]?.importedSymbol, jsii_utils_1.parentSymbol),
    };
}
exports.analyzeImportDeclaration = analyzeImportDeclaration;
//# sourceMappingURL=imports.js.map